import moment from 'moment'
import store from '@/store'
#foreach($column in $columns)
#if(!$column.superColumn && !$column.pk && ${column.dictType} != '')
import dictJson from '@/dict/Dict'
#break
#end
#end

export default {
    data () {
        return {
#foreach ($column in $columns)
#set($alreadySelect = 0)
#if($column.isQuery == '1' || $column.isInsert == '1')
#if($column.htmlType == "select")
#if($alreadySelect > 0) , #end
            ${column.javaField}Item: {
                name: '${column.javaField}',
                label: '${column.columnComment}',
                options: dictJson.$column.dictType
            },
#set($alreadySelect = 1)
#elseif($column.htmlType == "radio")
            ${column.javaField}Options: dictJson.$column.dictType,
#end
#end
#end
        }
    },
    methods: {
        hasPermission (authCode) {
          const allPermission = '*:*:*'
          const permissions = store.getters.authCodes

          if (authCode && authCode instanceof Array && authCode.length > 0) {
              const permissionFlag = authCode

              return permissions.some(permission => {
                 return allPermission === permission || permissionFlag.includes(permission)
              })
          } else {
              throw new Error('请设置操作权限标签值')
          }
        },
        /** 操作反馈 */
        operationFeedback (res, label = '') {
            const { code, msg } = res
            if (code && code !== 200) {
                this.$notify({
                    type: 'error',
                    message: msg
                })
                return
            }
            this.$notify({
                message: label + '成功',
                type: 'success'
            })
        },
#foreach($column in $columns)
#if(!$column.superColumn && !$column.pk && $column.htmlType == "datetime" && $column.queryType == 'BETWEEN')
        addDateRange(params, dateRange, beginField, endField) {
            const search = params;
            search[beginField] = "";
            search[endField] = "";
            if (null !== dateRange && '' !== dateRange) {
                search[beginField] = dateRange[0];
                search[endField] = dateRange[1];
            }
            return search;
        },
#break
#end
#end
        /**
         * 格式化日期函数
         *
         * @param date
         * @param formatString
         * @returns {String}
         */
        formatDate: (date = new Date(), formatString = 'YYYY-MM-DD HH:mm') => {
            return formatString ? moment(date).format(formatString) : ''
        },
        /**
         * 下载二进制文件
         * @param data
         * @param fileName
         */
        streamFileDownload (data, fileName) {
            if (!data) return
            const url = window.URL.createObjectURL(new Blob([data],
                { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }))
            const link = document.createElement('a')
            link.style.display = 'none'
            link.href = url
            link.setAttribute('download', fileName)
            document.body.appendChild(link)
            link.click()
            link.remove()
        }
    }
}

